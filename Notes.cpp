// Записки по языку C++ (C++11)


//-----------------------------------------------------------------------------
// ПОРЯДОК СОЗДАНИЯ ПРОГРАММЫ
// 
// Исходный код  Windows (.cpp, .cxx, .cc) Linux (.C, .cc, .cxx, .cpp, .c++)
//			| 
// Компилятор
//			|
// Объектный код (.o)
//			|
//			|		 Код бибилиотеки
//			|		/ 
// Компоновщик  
//			|		\
//			|		 Код запуска
//			|
// Исполняемый код Windows (a.exe) Linux (a.out, a)
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// КОММЕНТАРИЙ
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// ДЕРЕКТИВЫ ПРЕПРОЦЕССОРА
// 
// #include 
// 
// #include <iostream> <- Эта дириктива заставляет препроцессор добавить
// содержимое файла "iostream" в нашу программу
// 
// #define 
// 
// #define INT_MAX 32767 <- Эта деректива сообщает препроцессору следующее:
// найти в программе экземпляры символической констанкты INT_MAX и заменить
// каждое вхождения значением 32767
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// ЗАГОЛОВОЧНЫЕ ФАЙЛЫ
// 
// Тип заголовка  	| Соглашение			 | Пример		| Комментарии
//							|							 |					|
// Старый стиль С++  | Заканчивается на .h | iostream.h	| Используется в программах на C++
//							|							 |					|
// Старый стиль C		| Заканчивается на .h | math.h		| Используетс в программа на С и С++				
//							|							 |					|
// Новый стиль C++	| Без расширения		 | iostream    | Используется в программах на С++,
//							|							 |					| использует пространство имен std
//							|							 |					|
// Переобразованный С| Префикс "с", без    | cmath       | Используется в программах на C++,
//							| расширения          |					| может использовать средства, не
//							|							 |					| характерные для С, такие как
//							|							 |					| пространство имен std
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// ПРОСТРАСТВО ИМЕН
// 
// Деректива "using"
// Пример -> "using namespace std;" все пространства имен std (для ленивых подход)
// 
// Пример: (для нормальных подход)
// "using std::cout;" -> делает доступным cout
// "using std::endl;" -> делает доступным endl
// "using std::cin;" -> делает доступным cin
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// ВЫВОД
// 
// Пример -> cout << "Hello, world!"
// 
// Конкатенация cout:
// Пример -> cout << "Hello, world!" << "Hello, world!" << "Hello, world!"
// 
// Манипуляторы:
// endl - переход на новую строку
// Пример -> cout << "Hello, world!" << endl
// 
// Упрвляющие последовательности:
// \n - переход на новую строку
// \t - Горизонтальная табуляция 
// \v - Вертикальная табуляция
// \b - Забой
// \r - Возврат кретки
// \a - Предупреждение
// \\ - Обратная касая черта
// \? - Знак вопроса
// \' - Одинарная кавычка
// \" - Двойная кавыччка
// 
// Вывод значений в десятеричном восьмеричном и шестнадцатеричном виде:
// std::cout << a << std::endl;
//
// std::cout << std::oct;			<- переводит в восьмеричный вид
// std::cout << b << std::endl;
//
// std::cout << std::hex;			<- переводит в шестнадцатеричный вид
// std::cout << c << std::endl;
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// ВВОД
// 
// Пример -> cin >> имя переменной
// getline()
// get()
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// ФУНКЦИИ
// 
// Пример:
// 
// int function()
// {
// ...
// }
// 
// int function() <- портотип функции
// 
// Пример в коде:
// 
// #include <iostream>
// int function1(int); <- портотип функции1
// int function2(int); <- портотип функции2
// 
// int main() <- точка входа
// {
// ...
// function1(int); <- используем функцию1
// ...
// function2(int); <- используем функцию2
// ...
// }
// 
// int function1(int) <- определяем функцию1
// {
// ...
// }
// 
// int function2(int) <- определяем функцию2
// {
// ...
// return int
// }
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// ПЕРЕМЕННЫЕ
//
// Тип переменной Имя переменой Присвоение Значение
//			int			x					=			  5
//
// Пример:
// int x = 5 
// int x = {} <- x в 0
// int x{} < - x в 0
// 
// Имя переменной:
// РАзрешено A-Z a-z 0-9 _
// Первый символ имени не должен быть цифрой
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// ТИПЫ ДАННЫХ
//
// Числа с плавающей точкой:
// float - 4 байта 
// double - 8 байт
//
// Целые числа:
// short - 2 байта
// int - 4 байта
// long - 4 байта
// long long - 8 байт
//
// Символьный тип:
// char - 1 байт 
// char <- может хранить упрвляющие последовательности "\n"
// wchar_t - 2 байта от 0 до 65 535 (4 байта от 0 до 4 294 967 295)
// wchar16_t - 2 байта от 0 до 65 535
// wchar32_t - 4 байта от 0 до 4 294 967 295
//
// Логический тип:
// bool - 1 байт
// true = 1
// false = 0
// 
// Тип без значения:
// void
// 
// Типы без знака:
// unsigned char от 0 до 255
// unsigned short от 0 до 65 535
// unsigned int от 0 до 4 294 967 295
// unsigned long от 0 до 4 294 967 295
// unsigned long long от 0 до 18 446 744 073 709 661 615
// 
// Типы со знаком:
// signed char от -128 до 127
// signed short от -32 768 до 32767
// signed int от -2 147 483 648 до 2 147 483 647
// signed long от -2 147 483 648 до 2 147 483 647
// signed long long от -9 223 372 036 854 775 808 до 9 223 372 036 854 775 807
//
// Целочисленные литералы
// int a = 42 <- десятичный целочисленный литерал
// int a = 042 <- восьмеричный целочисленный литерал
// int a = 0x42 <- шестнадцетеричный целочисленный литерал
// ----------------------------------------------------------------------------


// ----------------------------------------------------------------------------
// КОНСТАНТЫ
// 
// Пример:
// const тип имя <- все констанкты пишутся большими буквами и определять надо сразу
// const int COUNT_DAYS_IN_WEEK = 7
// 
// 
// 1.234f <- константа float
// 2.345324E28 <- константа double
// 2.2L <- константа long double
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Арифметические операции в С++
// 
// + -> 1 + 1 = 2
// a += a
// - -> 2 - 1 = 1
// a -= a
// * -> 2 * 2 = 4
// a *= a
// / -> 10 / 5 = 2
// a /= a
// % -> 19 % 6 = 1
// a %= a
// double err = 3.5 % 1.2;		// Ошибка
// 
// инкемент ++ и дикремент --
// постфиксная и префексная 
// a++           ++a
// 
// При выполнениии арифметических операций компилятор руководствуется следующими правилами:
// 1. Если тип целочисленный, то выполняется операция над целочисленными числами
// 2. Если оба операнда имеют знак, или оба операнда беззнаковые, и один из них
// имеет меньший диапазон допустимых значений, чем другой, он преобразуется в тип,
// который имеет больший диапазон значений
// 3. Если один операнд имеет знак, а другой беззнаковый, в этом случаеесли
// беззнаковый операнд имеет больший диапазон допустимых значений, чем операнд
// со знаком, то знаковый операнд преобразуется в тип беззнакового операнда
// 4. Если тип со знаком может представить все значения беззнакового типа,
// беззнаковый операнд преобразуется к типу операнда со знаком.
// 5. Иначе оба операнда преобразуются в беззнаковую версию типа со знаком. 
// 6. Если один из операндов имеет тип float, то другой операнд преобразуется
// в float.
// 7. Если один из операндов имеет тип double, то другой операнд преобразуется
// в double.
// 8. Если один из операндов имеет тип long double, то другой операнд
// преобразуется в long double. 
//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// ПРИВЕДЕНИЯ ТИПОВ ????????
// int x
// (long) x <- преобразует к типу long
// 
// Объявления auto
// auto n = 100 <- будет int
// 
// 
// 
// 
//-----------------------------------------------------------------------------


// МАССИВЫ - НАДО РАЗБЕРАТЬ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// short months[12] <- массив элементов типа short
// 
// имя типа имя масива [размер массива]
// 
// Обращатся к массивам по index
// index массива начинается с 0
// 
// int yams[3]
// yams[0] = 7
// 
// int mas[3] = {1, 2, 3}
// 
// 
// 
// 
// 
// 
//




// 
// 
// 
// 
// VECTOR
// ARRAY
// STRING

// 
//
// 
// 
// ОБЛАСТИ ВИДИМОСТИ 
//
// Адреса переменых
// 
// 
// 
// 
// 
// ОПЕРАТОРЫ
// 
// Унарные -> a = -a
//		
//			
// Бинарные -> + - * / %
// Тренарные
// 
// 
// 
// 
// 
// 
//
// 
// ЛОГИЧЕСКИЕ ОПЕРАЦИИ
// 
// 
// ПРЕОРИТЕТЫ
// 
// 
// Логические Выбо if
// 
// Опрератор выбора switch
// 
// ЦИКЛЫ WHILE - DO WHILE
// ЦИКЛ FOR
// 
// 
// 
// 
// 
// 
// СТИЛЬ НАПИСАНИЯ КОДА
//
